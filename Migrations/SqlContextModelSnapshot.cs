// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PoliVagas.Core.Infrastructure.Persistence;

#nullable disable

namespace core.Migrations
{
    [DbContext(typeof(SqlContext))]
    partial class SqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PoliVagas.Core.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("PoliVagas.Core.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("PoliVagas.Core.Domain.IntegrationAgent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("PoliVagas.Core.Domain.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HoursPerDay")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IntegrationAgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LimitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int?>("Semester")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("Workplace")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IntegrationAgentId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("PoliVagas.Core.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastRunTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PoliVagas.Core.Domain.Course", b =>
                {
                    b.HasOne("PoliVagas.Core.Domain.Job", null)
                        .WithMany("Courses")
                        .HasForeignKey("JobId");
                });

            modelBuilder.Entity("PoliVagas.Core.Domain.Job", b =>
                {
                    b.HasOne("PoliVagas.Core.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliVagas.Core.Domain.IntegrationAgent", "IntegrationAgent")
                        .WithMany()
                        .HasForeignKey("IntegrationAgentId");

                    b.OwnsOne("PoliVagas.Core.Domain.Benefits", "Benefits", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<bool?>("HasFoodVoucher")
                                .HasColumnType("boolean");

                            b1.Property<bool?>("HasHealthInsurance")
                                .HasColumnType("boolean");

                            b1.Property<bool?>("HasLifeInsurance")
                                .HasColumnType("boolean");

                            b1.Property<bool?>("HasTransportVoucher")
                                .HasColumnType("boolean");

                            b1.Property<string>("Others")
                                .HasColumnType("text");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.OwnsOne("PoliVagas.Core.Domain.Contact", "Contact", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .HasColumnType("text");

                            b1.Property<string>("EmailInstructions")
                                .HasColumnType("text");

                            b1.Property<string>("ExternalId")
                                .HasColumnType("text");

                            b1.Property<string>("LinkedinUrl")
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.OwnsOne("PoliVagas.Core.Domain.Requirements", "Requirements", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("EnglishLevel")
                                .HasColumnType("integer");

                            b1.Property<string>("HardSkills")
                                .HasColumnType("text");

                            b1.Property<string>("OtherLanguages")
                                .HasColumnType("text");

                            b1.Property<string>("SoftSkills")
                                .HasColumnType("text");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.Navigation("Benefits")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("IntegrationAgent");

                    b.Navigation("Requirements")
                        .IsRequired();
                });

            modelBuilder.Entity("PoliVagas.Core.Domain.Notification", b =>
                {
                    b.OwnsOne("PoliVagas.Core.Domain.JobFilter", "Filter", b1 =>
                        {
                            b1.Property<Guid>("NotificationId")
                                .HasColumnType("uuid");

                            b1.Property<List<string>>("Area")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<List<Guid>>("CompanyId")
                                .IsRequired()
                                .HasColumnType("uuid[]");

                            b1.Property<List<Guid>>("CourseId")
                                .IsRequired()
                                .HasColumnType("uuid[]");

                            b1.Property<int[]>("EnglishLevel")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<bool?>("HasFoodVoucher")
                                .HasColumnType("boolean");

                            b1.Property<bool?>("HasHealthInsurance")
                                .HasColumnType("boolean");

                            b1.Property<bool?>("HasLifeInsurance")
                                .HasColumnType("boolean");

                            b1.Property<bool?>("HasTransportVoucher")
                                .HasColumnType("boolean");

                            b1.Property<int?>("MaxHoursPerDay")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("MaxLimitDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int?>("MinHoursPerDay")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("MinLimitDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<decimal?>("MinSalary")
                                .HasColumnType("numeric");

                            b1.Property<int[]>("Type")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<int[]>("Workplace")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notifications");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.Navigation("Filter")
                        .IsRequired();
                });

            modelBuilder.Entity("PoliVagas.Core.Domain.Job", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
